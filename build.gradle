buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.6.3")
    }
}

plugins {
    id 'com.palantir.docker' version '0.22.1'
}

group = 'kingstonduo'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

jar {
    baseName = 'cassiopeia-data'
    version =  '1.7'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

processResources {
    filesMatching('application.properties') {
        expand(project.properties)
    }
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb")
    implementation("org.springframework.boot:spring-boot-starter-web")
    testImplementation("org.mockito:mockito-core")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation 'junit:junit:4.12'
}

springBoot {
    mainClass = "org.kpmp.Application"
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

def getCurrentGitBranch() {
  if (project.hasProperty('tag')) {
    def tagValue = project.property('tag')
    return tagValue
  } else {
      def gitBranch = "Unknown branch"
      try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
      } catch (e) {
        }
        if (gitBranch == "develop" || gitBranch == "master"){
          return jar.version
        }else{
          return gitBranch
        }
    }
}

docker {
    name "kingstonduo/cassiopeia-data:" + getCurrentGitBranch()
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}
